#pragma once

#include "Scene.hpp"

class MultisampleScene: public Scene
{
    // Renderer interfaces generated by BasicScene
    NFE::Renderer::RenderTargetPtr mWindowRenderTarget;
    NFE::Renderer::PipelineStatePtr mPipelineState;
    NFE::Renderer::ShaderPtr mVertexShader;
    NFE::Renderer::ShaderPtr mPixelShader;
    NFE::Renderer::BufferPtr mVertexBuffer;
    NFE::Renderer::VertexLayoutPtr mVertexLayout;

    NFE::Renderer::TexturePtr mRenderTargetTexture;
    NFE::Renderer::RenderTargetPtr mRenderTarget;

    NFE::Renderer::ResourceBindingSetPtr mVSBindingSet;
    NFE::Renderer::ResourceBindingSetPtr mPSBindingSet;
    NFE::Renderer::ResourceBindingLayoutPtr mResBindingLayout;
    NFE::Renderer::ResourceBindingInstancePtr mVSBindingInstance;
    NFE::Renderer::ResourceBindingInstancePtr mPSBindingInstance;

    int mTextureSlot;
    int mCBufferSlot;

    int mVSBindingSlot;
    int mPSBindingSlot;

    // Releases only subscene-related resources. Backbuffer, RT and BlendState stay intact.
    void ReleaseSubsceneResources() override;

    // Resource creators for subscenes
    bool CreateShaders();
    bool CreateVertexBuffer();

    bool CreateSubScene();

public:
    MultisampleScene();
    ~MultisampleScene();

    bool OnInit(void* winHandle) override;
    void Draw(float dt) override;
    void Release() override;
};
