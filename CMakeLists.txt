# @file
# @author LKostyra (costyrra.xl@gmail.com)
# @brief  Main CMake file for nfEngine

CMAKE_MINIMUM_REQUIRED(VERSION 2.6)

PROJECT(nfEngine)

IF("${CMAKE_BINARY_DIR}" STREQUAL "${CMAKE_SOURCE_DIR}")
    MESSAGE(FATAL_ERROR
            "In-source build is not allowed. Please, make a build directory and "
            "run CMake there, ex:\n"
            "    $ mkdir build; cd build\n"
            "    $ cmake .."
            )
ENDIF("${CMAKE_BINARY_DIR}" STREQUAL "${CMAKE_SOURCE_DIR}")

MESSAGE("Generating Makefile for nfEngine project")

INCLUDE(FindPkgConfig)

# Pre-define Release build
IF(NOT DEFINED CMAKE_BUILD_TYPE OR CMAKE_BUILD_TYPE STREQUAL "")
    SET(CMAKE_BUILD_TYPE Release)
ENDIF(NOT DEFINED CMAKE_BUILD_TYPE OR CMAKE_BUILD_TYPE STREQUAL "")

# Pre-define 64-bit build platform
IF(NOT DEFINED NFE_BUILD_PLATFORM)
    IF(WIN32)
        SET(NFE_BUILD_PLATFORM ${CMAKE_GENERATOR_PLATFORM})
    ELSEIF(UNIX)
        EXECUTE_PROCESS(COMMAND uname -m
                        OUTPUT_VARIABLE NFE_BUILD_PLATFORM OUTPUT_STRIP_TRAILING_WHITESPACE)
    ELSE(WIN32)
        MESSAGE(FATAL_ERROR "Unsupported build platform")
    ENDIF(WIN32)
ENDIF(NOT DEFINED NFE_BUILD_PLATFORM)


# Set required variables
# TODO Final configuration support
SET(CMAKE_CXX_FLAGS       "${CMAKE_CXX_FLAGS} -DNFE_CONFIGURATION_RELEASE -O2 -std=c++17")
SET(CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} -DNFE_CONFIGURATION_DEBUG -D_DEBUG -O0 -g -std=c++17")

# Sanitizer build (clang or gcc >= 4.8 required)
IF(DEFINED SANITIZE)
    MESSAGE(STATUS "Enabling sanitizer: ${SANITIZE}")
    SET(SANITIZE_FLAG          "-fsanitize=${SANITIZE}")
    SET(CMAKE_CXX_FLAGS        "${CMAKE_CXX_FLAGS} ${SANITIZE_FLAG}")
    SET(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} ${SANITIZE_FLAG}")
ENDIF(DEFINED SANITIZE)

# If any macros specific to project are needed, prefix them with NFE_
SET(NFE_ROOT_DIRECTORY ${CMAKE_SOURCE_DIR})
SET(NFE_BUILD_DIRECTORY ${CMAKE_BINARY_DIR})
SET(NFE_OUTPUT_DIRECTORY ${NFE_ROOT_DIRECTORY}/Bin/${NFE_BUILD_PLATFORM}/${CMAKE_BUILD_TYPE})
SET(NFEDEPS_ROOT_DIRECTORY ${NFE_ROOT_DIRECTORY}/Deps)
SET(NFEDEPS_LIB_DIRECTORY ${NFEDEPS_ROOT_DIRECTORY}/Bin/${NFE_BUILD_PLATFORM}/${CMAKE_BUILD_TYPE})
SET(NFE_SRC_DIRECTORY ${NFE_ROOT_DIRECTORY}/Src)

# disable C++ exceptions
# TODO some external libs require this, fix it
#SET(CMAKE_CXX_FLAGS  "${CMAKE_CXX_FLAGS} -fno-exceptions")

ADD_DEFINITIONS(-DNFE_PLATFORM_LINUX)
ADD_DEFINITIONS(-DNFE_ROOT_DIRECTORY="${NFE_ROOT_DIRECTORY}/")
ADD_DEFINITIONS(-DNFE_COMPILER="${CMAKE_CXX_COMPILER_ID}")
ADD_DEFINITIONS(-DNFE_OS="${CMAKE_SYSTEM}")

MESSAGE("Build type is ${CMAKE_BUILD_TYPE}")
MESSAGE("Project directory is ${NFE_ROOT_DIRECTORY}")
MESSAGE("Build directory is ${NFE_BUILD_DIRECTORY}")
MESSAGE("Output path is ${NFE_OUTPUT_DIRECTORY}")
MESSAGE("Platform is ${NFE_BUILD_PLATFORM}")

# Add dependencies
ADD_SUBDIRECTORY("Deps")

# Building outputs
SET(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${NFE_OUTPUT_DIRECTORY})
SET(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${NFE_OUTPUT_DIRECTORY})

# Add all projects
ADD_SUBDIRECTORY("Src")

FILE(MAKE_DIRECTORY ${NFE_OUTPUT_DIRECTORY})
